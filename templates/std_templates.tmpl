[define_template https_redirect {
<VirtualHost [value ::vhost "10.0.0.1:80"]>
	ServerAdmin [value ::server_admin "webmaster@localhost"]
	ServerName [set ::server_name]
	[ if {[info exists ::server_alias]} {return "ServerAlias $::server_alias"} ]

	DocumentRoot /var/www
	<Directory />
		Options FollowSymLinks
		AllowOverride None
	</Directory>

[## square brackets contained in text -> use 'raw {...}'
raw {
	RewriteEngine on
	RewriteRule ^.*$      https://%{SERVER_NAME}%{REQUEST_URI} [L,R=301]
}]
[include_template_args]
</VirtualHost>

}

define_template std_http {
[set document_root [value ::document_root "/www/[set ::server_name]/docs"] ; return]
<VirtualHost [value ::vhost "10.0.0.1:80"]>
	ServerAdmin [value ::server_admin "webmaster@localhost"]
	ServerName [set ::server_name]
	[ if {[info exists ::server_alias]} {return "ServerAlias $::server_alias"} ]

	DocumentRoot [set document_root]
	<Directory />
		Options FollowSymLinks
		AllowOverride None
	</Directory>
	<Directory [set document_root]>
	[if {![info exists ::document_root_directory]} { substitute {
		Options FollowSymLinks
		AllowOverride All
		Order allow,deny
		allow from all
	}} else { substitute $::document_root_directory }]
	</Directory>

	ErrorLog /var/log/apache2/[set ::server_name]-error.log
	CustomLog /var/log/apache2/[set ::server_name]-access.log combined
[include_template_args]
</VirtualHost>
}

define_template std_https {
## default HTTPS configuration for host [set ::server_name]
[set document_root [value ::document_root "/www/[set ::server_name]/docs"] ; return]
<VirtualHost [value ::vhost "10.0.0.1:443"]>
	ServerAdmin [value ::server_admin "webmaster@localhost"]
	ServerName [set ::server_name]
	[ if {[info exists ::server_alias]} {return "ServerAlias $::server_alias"} ]

	DocumentRoot [set document_root]
	<Directory />
		Options FollowSymLinks
		AllowOverride None
	</Directory>
	<Directory [set document_root]>
	[if {![info exists ::document_root_directory]} { substitute {
		Options FollowSymLinks
		AllowOverride All
		Order allow,deny
		allow from all
	}} else { substitute $::document_root_directory }]
	</Directory>

	ErrorLog /var/log/apache2/[set ::server_name]-ssl-error.log
	CustomLog /var/log/apache2/[set ::server_name]-ssl-access.log combined

	## see https://wiki.mozilla.org/Security/Server_Side_TLS
	SSLEngine on
	SSLCertificateFile    /etc/apache2/ssl/[set ::server_name].crt
	SSLCertificateKeyFile /etc/apache2/ssl/[set ::server_name].key
	SSLProtocol             all -SSLv2
	SSLCipherSuite          ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:HIGH:!RC4:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK
	SSLHonorCipherOrder     on
	SSLCompression          off
	

	<FilesMatch "\.(cgi|shtml|phtml|php)$">
		SSLOptions +StdEnvVars
	</FilesMatch>
	#<Directory /usr/lib/cgi-bin>
	#	SSLOptions +StdEnvVars
	#</Directory>
[raw {
	BrowserMatch "MSIE [2-6]" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0
	# MSIE 7 and newer should be able to use keepalive
	BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
}]

[include_template_args]
</VirtualHost>
}]

